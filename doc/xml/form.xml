<!-- $Id: -->

<section id="form">
	<title>Form: An HTML Form Fields Generation Utility</title>
	<refentry id="form_package">
		<refnamediv>
			<refname>form</refname>
			<refpurpose>
				The <command>form</command> packages creates a form object that can be manipulated
				to generate HTML forms
			</refpurpose>
		</refnamediv>
		<refsynopsisdiv>
			<cmdsynopsis>
			  	<command>form</command>
			  	<arg choice="plain"><replaceable>form_name</replaceable></arg>
			  	<group choice="opt">
			   	<arg>-option1</arg>
			    	<arg><replaceable>option value 1</replaceable></arg>
			    	<arg>-option2</arg>
			    	<arg><replaceable>option value 2</replaceable></arg>
			    	<arg>...</arg>
			  	</group>
			</cmdsynopsis>
		</refsynopsisdiv>
		<refsect1>
		  	<title>Description</title>
		  	<para>
				The <command>form</command> package is a utility to generating html forms. A <command>form</command>
				object command saves the programmer from typing the cumbersome html code of input elements, 
				working out a solution for better standardization and readability of the code. 
				<command>form</command> requires that just the basic information of interest to the code are 
				typed, greatly simplyfing the development of forms.
				A <command>form</command> object has specialized menthods to generate all the standard 
				input fields, i.e. text, password, hidden, generic button, submit or reset buttons and
				image. <command>form</command> creates select input fields, radiobutton and checkbox
				boolean options groups. Also new inputs introduced with HTML5 are supported: color, date, 
				datetime, datetime-local, email, file, month, number, range, search, tel, time, url, week.
			</para>
			<para>
				Other input elements can be generated using the general purpose 'field' method.			
			</para>
		</refsect1>
		<refsect1>
			<title>Form Object subcommands</title>
			<para>
				Form Objects are Tcl commands that need subcommands to invoke specific actions on an object. 
				They have a general syntax that follow this scheme:				
			</para>
			<variablelist>
				<varlistentry>
					<listitem>
						<cmdsynopsis>
							form_object <arg choice="plain">subcommand</arg> <arg><replaceable>name</replaceable></arg>
							<arg>-option1</arg> <arg>value1</arg> <arg>-option2</arg> <arg>value2</arg>
						</cmdsynopsis>
					</listitem>	
				</varlistentry>			
			</variablelist>
			<para>
				Where <arg>name</arg> is to become the value of a 'name' attribute in input field tag. The list
				of switches that follows <arg>name</arg> is copied into the a tag as attribute="value" pairs. 
				Some subcommand (e.g. radiobuttons and checkboxes) treat specific options in a way that fits
				the specific organization of these fields.
			</para>
		</refsect1>
		<refsect1>
			<title>Options</title>
			<varlistentry>
		    	<listitem>
		      	<cmdsynopsis>
					<arg choice="plain">-method</arg>
					<arg choice="opt">post|get</arg>
		      	</cmdsynopsis>
		      	<para>
		      		The method to be used to encode the form data. Possible values are get or post
		      	</para>
		      	<note>
					At the time of writing only the 'get' method is implemented		      	
		      	</note>
		    	</listitem>
	  		</varlistentry>
			<varlistentry>
		    	<listitem>
		      	<cmdsynopsis>
					<arg choice="plain">-name</arg>
					<arg choice="opt"><replaceable>form_name</replaceable></arg>
		      	</cmdsynopsis>
		      	<para>
		      		a name for the form being generated: this value becomes the value of the 
		      		attribute 'name' in the &lt;form&gt; tag.
		      	</para>
		    	</listitem>
	  		</varlistentry>
	  		<varlistentry>
				<listitem>
					<cmdsynopsis>
						<arg choice="plain">-defaults</arg>
						<arg choice="opt"><replaceable>default_values</replaceable></arg>
					</cmdsynopsis>
					<para>
						an array of default values	to be assigned to the fields of the form. 
						Every name in the array is matched with an input field, when
						a given field gets added to the form it is initialized with the 
						value of the corresponding variable in the array. 
						This option works well in conjuction with the 
						<command>load_response</command> command of Rivet when default values
						come from another form.
					</para>
				</listitem>	  		
	  		</varlistentry>
	  		<varlistentry>
				<listitem>
					<cmdsynopsis>
						<arg choice="plain">-action</arg>
						<arg choice="opt"><replaceable>URL to form data processing procedure</replaceable></arg>
					</cmdsynopsis>
					<para>
							The URL to the procedure data are being sent to. If no <arg>-action</arg> switch is specified
							the data are sent to the form's URL.
					</para>
				</listitem>	  		
	  		</varlistentry>

		</refsect1>
		<refsect1>
			<variablelist>
				<varlistentry>
	    			<listitem>
	      			<cmdsynopsis>
							<arg choice="plain">start</arg>
	      			</cmdsynopsis>
	      			<para>
							generate the &lt;form&gt; tag with all of its arguments. 
							This command must be called as first in the form generation
							process. The following is a sample of code creating a form named 'formname' whose data will
							be sent with menthod GET and initialized with data stored in array 'response' 
						</para>
						<programlisting>
form myform -defaults response -method get -name formname
myform start
myform text	  text_entry -size 20
myform select option_selected -values {opt1 opt2 opt3 opt4}
myform submit submit -value Search
myform end</programlisting>						
						<para>
							The code collects the input field values and send them through GET 
							method to the same form URL for further processing. Use the <arg>-action</arg> 
							switch to specify a different URL to process the data
						</para>
	    			</listitem>
	  			</varlistentry>
	  			
	  			<varlistentry>
	    			<listitem>
	      			<cmdsynopsis>
							<arg choice="plain">end</arg>
	      			</cmdsynopsis>
	      			<para>
							generate the &lt;/form&gt; closing tag. This command must
							be called as last in the form generation process
						</para>
	    			</listitem>
	  			</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">field</arg>
							<arg>type</arg>
							<arg>name</arg>
							<arg choice="opt">args</arg>
						</cmdsynopsis>
						<para>
							emit a field of the given <arg>type</arg> and <arg>name</arg>,
							including any default key-value pairs defined for this field 
							type and optional key-value pairs included with the statement
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">text</arg>
							<arg>name</arg>
							<arg choice="opt">args</arg>
						</cmdsynopsis>
						<para>
							Emits a text input field of the form
							&lt;input type="text" name="<arg>name</arg>" .../&gt;
						</para>					
					</listitem>				
				</varlistentry>
				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">password</arg>
							<arg>name</arg>
							<arg>args</arg>
						</cmdsynopsis>
						<para>
							Same as text, but the input is kept hidden as usual for
							passwords
						</para>					
					</listitem>				
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">hidden</arg>
							<arg>name</arg>
							<arg>args</arg>
						</cmdsynopsis>
						<para>
							hidden input element: the classical field to be embedded in form to 
							pass status variables.
						</para>					
					</listitem>				
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">submit</arg>
							<arg>name</arg>
							<arg>args</arg>
						</cmdsynopsis>
						<para>
							emits the code for a classical HTML submit button. Example: the following
							code
						</para>
						<para>
							<programlisting>
form myform -defaults response -method get -name feedsearch
myform start
myform submit submit -value Search</programlisting>						
						</para>
						<para>
							Would emit a form  like this
						</para>
						<programlisting>
&lt;form...&gt;
&lt;input type="submit" name="submit" value="Search" /&gt; 
&lt;/form&gt;</programlisting>
					</listitem>				
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">button</arg>
							<arg>name</arg>
							<arg>args</arg>
						</cmdsynopsis>
						<para>
							emits the code for a button field having <arg>name</arg> as name
						</para>			
					</listitem>
				</varlistentry>
				
				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">reset</arg>
							<arg>name</arg>
							<arg>args</arg>
						</cmdsynopsis>
						<para>
							Classical HTML reset button that brings the input fields
							back to their initial values
						</para>
					</listitem>								
				</varlistentry>	
				
				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">image</arg>
							<arg>name</arg>
							<arg>args</arg>
						</cmdsynopsis>
						<para>
							Emits an image input field
						</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">checkbox</arg>
							<arg>name</arg>
							<arg>args</arg>
						</cmdsynopsis>
						<para>
							Emits a checkbox input field
						</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">radio</arg>
							<arg>name</arg>
							<arg>args</arg>
						</cmdsynopsis>
						<para>
							Emits a radiobutton input field
						</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">color</arg>
							<arg>name</arg>
							<arg>args</arg>							
						</cmdsynopsis>
						<para>
							Emits an HTML 5 "color" form field						
						</para>			
					</listitem>				
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">date</arg>
							<arg>name</arg>
							<arg>args</arg>							
						</cmdsynopsis>
						<para>
							Emits an HTML 5 "date" form field						
						</para>			
					</listitem>				
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">datetime</arg>
							<arg>name</arg>
							<arg>args</arg>							
						</cmdsynopsis>
						<para>
							Emits an HTML 5 "datetime" form field						
						</para>			
					</listitem>				
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">datetime_local</arg>
							<arg>name</arg>
							<arg>args</arg>							
						</cmdsynopsis>
						<para>
							Emits an HTML 5 "datetime_local" form field						
						</para>			
					</listitem>				
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">email</arg>
							<arg>name</arg>
							<arg>args</arg>							
						</cmdsynopsis>
						<para>
							Emits an HTML 5 "email" form field						
						</para>			
					</listitem>				
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">file</arg>
							<arg>name</arg>
							<arg>args</arg>							
						</cmdsynopsis>
						<para>
							Emits an HTML 5 "file" form field						
						</para>			
					</listitem>				
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">month</arg>
							<arg>name</arg>
							<arg>args</arg>							
						</cmdsynopsis>
						<para>
							Emits an HTML 5 "month" form field						
						</para>			
					</listitem>				
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">number</arg>
							<arg>name</arg>
							<arg>args</arg>							
						</cmdsynopsis>
						<para>
							Emits an HTML 5 "number" form field						
						</para>			
					</listitem>				
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">range</arg>
							<arg>name</arg>
							<arg>args</arg>							
						</cmdsynopsis>
						<para>
							Emits an HTML 5 "range" form field						
						</para>			
					</listitem>				
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">search</arg>
							<arg>name</arg>
							<arg>args</arg>							
						</cmdsynopsis>
						<para>
							Emits an HTML 5 "search" form field						
						</para>			
					</listitem>				
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">tel</arg>
							<arg>name</arg>
							<arg>args</arg>							
						</cmdsynopsis>
						<para>
							Emits an HTML 5 "tel" form field						
						</para>			
					</listitem>				
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">time</arg>
							<arg>name</arg>
							<arg>args</arg>							
						</cmdsynopsis>
						<para>
							Emits an HTML 5 "time" form field						
						</para>			
					</listitem>				
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">url</arg>
							<arg>name</arg>
							<arg>args</arg>							
						</cmdsynopsis>
						<para>
							Emits an HTML 5 "url" form field						
						</para>			
					</listitem>				
				</varlistentry>

				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">week</arg>
							<arg>name</arg>
							<arg>args</arg>							
						</cmdsynopsis>
						<para>
							Emits an HTML 5 "week" form field						
						</para>			
					</listitem>				
				</varlistentry>
				<varlistentry>
					<listitem>
						<cmdsynopsis>
							<arg choice="plain">name</arg>
							<arg>-values <replaceable>values list</replaceable></arg>
							<arg>-labels <replaceable>labels list</replaceable></arg>
							<arg>args</arg> 					
						</cmdsynopsis>
						<para>
							the <command>radiobutton</command> creates a whole radiobutton group
							with the values and labels specified in the argument list. If no <arg>-labels</arg> switch is
							passed to the subcommand the values are printed as labels of the radiobutton.  Example:
						</para>
						<programlisting>
form myform -defaults response -method get -name formname
myform start
myform text	  text_entry -size 20
myform radiobuttons fruit -values {big medium small} \
								  -labels {Watermelon Orange Strawberry} \
								  -class myradiobuttonclass
myform submit submit -value Search
myform end</programlisting>
						<para>
							will generate the following HTML code.
						</para>
						<programlisting>
&lt;input type="radio" name="fruit" class="myradiobuttonclass" value="big" /&gt;Watermelon
&lt;input type="radio" name="fruit" class="myradiobuttonclass" value="medium" /&gt;Orange
&lt;input type="radio" name="fruit" class="myradiobuttonclass" value="small" /&gt;Strawberry
</programlisting>
						<para>
							if the 'response' array has a variable for the name 'fruit' the corresponding 
							radiobutton field is automatically checked. The options <arg>values</arg> and <arg>labels</arg>
							are used internally and don't get into the tag attributes. If a <arg>labels</arg> 
							switch is not given labels are generated using the <arg>values</arg> argument.
						</para>
					</listitem>				
				</varlistentry>
	  		</variablelist>
		</refsect1>
	</refentry>

</section>
