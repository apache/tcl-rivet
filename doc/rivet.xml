<?xml version="1.0" encoding="iso-8859-1"?>

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "http://www.oasis-open.org/committees/docbook/xml/4.1.2/docbookx.dtd">

<article>
  <articleinfo>
    <title>Apache Rivet</title>
    <releaseinfo>
      $Id$
    </releaseinfo>
    <copyright>
      <year>2002</year>
      <holder>Apache Software Foundation</holder>
    </copyright>
    <author>
      <firstname>David</firstname>
      <surname>Welton</surname>
    </author>
  </articleinfo>

  <section id="directives">
    <title>Rivet Apache Directives</title>
    <variablelist>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>Rivet_Script</command>
	    <arg>GlobalInitScript</arg>
	    <arg><replaceable>script</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Tcl script that is run when each interpreter is
	    initialized.  <option>script</option> is an actual Tcl
	    script, so to run a file, you would do:
	  </para>
	  <programlisting>
	    Rivet_Script GlobalInitScript "source /var/www/foobar.tcl"
	  </programlisting>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>Rivet_Script</command>
	    <arg>ChildInitScript</arg>
	    <arg><replaceable>script</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Script to be evaluated when each Apache child process is
	    initialized.  This is the recommended place to load modules.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>Rivet_Script</command>
	    <arg>ChildExitScript</arg>
	    <arg><replaceable>script</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Script to be evaluated when each Apache child process exits.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>Rivet_Script</command>
	    <arg>BeforeScript</arg>
	    <arg><replaceable>script</replaceable></arg>
	  </cmdsynopsis></term>
	<listitem>
	  <para>
	    Script to be evaluated before each server parsed (.rvt) page.
	  </para>
	</listitem>
      </varlistentry>


      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>Rivet_Script</command>
	    <arg>AfterScript</arg>
	    <arg><replaceable>script</replaceable></arg>
	  </cmdsynopsis></term>
	<listitem>
	  <para>
	    Script to be called after each server parsed (.rvt) page.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>Rivet_Script</command>
	    <arg>ErrorScript</arg>
	    <arg><replaceable>script</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    This code is called in place of the standard 'error' pages
	    generated for Rivet.  This directive may be useful if you
	    have sensitive logic that you wish to protect.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>Rivet_CacheSize</command>
	    <arg><replaceable>cachesize</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Number of rvt scripts to cache as Tcl Objects.  Default is
	    <command>MaxRequestsPerChild</command> / 2, or 50, if
	    <command>MaxRequestsPerChild</command> is 0.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </section>
  <section>
    <title>Rivet Tcl Commands and Variables</title>
    <variablelist>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>var</command>
	    <arg>get</arg>
	    <arg><replaceable>varname</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Returns the value of variable <option>varname</option> as a
	    string (even if there are multiple values).
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>var</command>
	    <arg>list</arg>
	    <arg><replaceable>varname</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Returns the value of variable <option>varname</option> as
	    a list, if there are multiple values.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>var</command>
	    <arg>exists</arg>
	    <arg><replaceable>varname</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Returns 1 if <option>varname</option> exists, 0 if it
	    doesn't.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>var</command>
	    <arg>number</arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Returns the number of variables.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>var</command>
	    <arg>all</arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Return a list of variable names and values.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>upload</command>
	    <arg>channel</arg>
	    <arg><replaceable>uploadname</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    When given the name of a file upload
	    <option><replaceable>uploadname</replaceable></option>,
	    returns a Tcl channel that can be used to access the
	    uploaded file.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>upload</command>
	    <arg>save</arg>
	    <arg><replaceable>uploadname</replaceable></arg>
	    <arg><replaceable>filename</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Saves the
	    <option><replaceable>uploadname</replaceable></option> in
	    the file
	    <option><replaceable>filename</replaceable></option>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>upload</command>
	    <arg>data</arg>
	    <arg><replaceable>uploadname</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Returns data uploaded to the server.  This is binary clean
	    - in other words, it will work even with files like
	    images, executables, compressed files, and so on.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>upload</command>
	    <arg>size</arg>
	    <arg><replaceable>uploadname</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Returns the size of the file uploaded.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>upload</command>
	    <arg>type</arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    If the Content-type is set, it is returned, otherwise, an
	    empty string.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>upload</command>
	    <arg>filename</arg>
	    <arg><replaceable>uploadname</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Returns the filename on the remote host that uploaded the file.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>upload</command>
	    <arg>names</arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Returns the variable names, as a list, of all the files
	    uploaded.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <example>
      <title>upload</title>
      The following HTML:
      <programlisting>
	&lt;form action="foo.ttml" enctypee="multipart/form-data"
	method="post"&gt;
	&lt;input type="file" name="MyUpload"&gt;&lt;/input&gt;
	&lt;/form&gt;
      </programlisting>

      Can be used with the following Tcl code in order to create a
      file upload form.

      <programlisting>
	upload save MyUpload /tmp/uploadfiles/file1

	puts "Saved file [upload filename MyUpload]
	([upload size MyUploadto] bytes) to server"
      </programlisting>
    </example>

    <variablelist>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>load_env</command>
	    <arg choice="opt"><replaceable>array_name</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Load the array of environment variables into the specified
	    array name.  Uses array <option>::request::env</option> by
	    default.
	  </para>
	  <para>
	    As Rivet pages are run in the <option>::request</option>
	    namespace, it isn't necessary to qualify the array name
	    for most uses - it's ok to access it as
	    <option>env</option>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>load_headers</command>
	    <arg><replaceable>array_name</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Load the headers that come from a client request into the
	    provided array name, or use <option>headers</option> if no
	    name is provided.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>load_cookies</command>
	    <arg choice="opt"><replaceable>array_name</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Load the array of cookie variables into the specified
	    array name.  Uses array <option>cookies</option> by
	    default.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>include</command>
	    <arg><replaceable>filename_name</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Include a file without parsing it for processing tags &lt;?
	    and ?&gt;.  This is the best way to include an HTML file or
	    any other static content.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>parse</command>
	    <arg><replaceable>filename</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Like the Tcl <command>source</command> command, but also
	    parses for Rivet &lt;?  and ?&gt; processing tags.  Using
	    this command, you can use one .rvt file from another.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>headers</command>
	    <arg>redirect</arg>
	    <arg><replaceable>uri</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Redirect from the current page to a new
	    URI. <emphasis>Must</emphasis> be done in the first block
	    of TCL code.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>headers</command>
	    <arg>setcookie</arg>
	    <arg>-name</arg>
	    <arg><replaceable>cookie-name</replaceable></arg>
	    <arg>-value</arg>
	    <arg><replaceable>cookie-value</replaceable></arg>
	    <group choice="opt">
	      <arg>-expires</arg>
	      <arg><replaceable>date/time</replaceable></arg>
	    </group>
	    <group choice="opt">
	      <arg>-domain</arg>
	      <arg><replaceable>domain</replaceable></arg>
	    </group>
	    <group choice="opt">
	      <arg>-path</arg>
	      <arg><replaceable>path</replaceable></arg>
	    </group>
	    <arg choice="opt">-secure</arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    This command is for setting cookies for the server to send
	    to the client.  <option>cookie-name</option> is the name
	    of the cookie, <option>cookie-value</option> is the data
	    associated with the cookie.  <option>-expires</option>
	    sets an expiration date for the cookie, and must be in the
	    format <constant>'DD-Mon-YY HH:MM:SS'</constant>,
	    <option>-path</option> sets the path for which the cookie
	    is valid, and <option>-secure</option> specifies that the
	    cookie is only to be transmitted if the connection is
	    secure (HTTPS).
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><cmdsynopsis>
	    <command>headers</command>
	    <arg>type</arg>
	    <arg><replaceable>content-type</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    This command sets the <constant>Content-type</constant>
	    header returned by the script, which is useful if you wish
	    to send content other than HTML with Rivet - PNG or jpeg
	    images, for example.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><cmdsynopsis>
	    <command>headers</command>
	    <arg>set</arg>
	    <arg><replaceable>headername</replaceable></arg>
	    <arg><replaceable>value</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Set arbitrary header names and values.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>makeurl</command>
	    <arg><replaceable>filename</replaceable></arg>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    Create a self referencing URL from a filename.  For example:
	    <programlisting>makeurl /tclp.gif</programlisting>
	    returns
	    <constant>http://[hostname]:[port]/tclp.gif</constant>.
	    where hostname and port are the hostname and port of the
	    server in question.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </section>

  <section>
    <title>Resources - How to Get Help</title>

    <section>
      <title>Mailing Lists</title>
      <para>
	The Rivet mailing list is the first place you should turn for
	help, if you haven't found the solution to your problem in the
	documentation.  Send email to
	<email>rivet-user@tcl.apache.org</email>.  If you have a
	question, idea, or comment about the Rivet code itself, please
	send us email at <email>rivet-dev@tcl.apache.org</email>.  To
	subscribe to either list, post email to
	<email>rivet-<replaceable>list</replaceable>-subscribe@tcl.apache.org</email>.
      </para>
      <para>
	The mailing list archives are available at <ulink
	  url="http://www.apachelabs.org"/>
      </para>
    </section>

    <section>
      <title>Web Sites</title>

      <para>
	There are several web sites that cover Apache and Tcl
	extensively.
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    <ulink url="http://tcl.apache.org"/> is the home for the
	    Apache Tcl project.  Go there for the latest versions of
	    our software (if you aren't reading these pages off of the
	    site!).
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <ulink url="http://httpd.apache.org/docs/"/> is the first
	    place to go for questions about the Apache web server.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <ulink url="http://www.tcl.tk/"/> is the cannonical site
	    for Tcl information.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <ulink url="htt://wiki.tcl.tk"/> is the Tcl'ers Wiki, a
	    free-form place to search for answers and ask for help.
	  </para>
	</listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Apache Rivet Installation</title>

    <procedure>
      <step>
	<title>Check Dependencies</title>
	<para>
	  To install Rivet, you will need Tcl 8.2 or greater and
	  Apache 1.3.xx.  It is known to run on Linux, FreeBSD,
	  OpenBSD, and Solaris and HPUX.  Windows NT is also possible
	  - please see the directions in the distribution.
	</para>
      </step>
      <step>
	<title>Get Rivet</title>
	<para>
	  Download the sources at <ulink
	    url="http://tcl.apache.org/Rivet/download"/>.  Currently
	  the only way to obtain Rivet.  In the future, we hope to
	  have a FreeBSD port, Debian package, RPM's, and windows
	  binaries.
	</para>
      </step>
      <step performance="optional">
	<title>Get and Install Apache Sources</title>
	<para>
	  If you don't have them, or if you want to build Rivet as a
	  static (built in) part of the Apache web server, you need
	  the source code to Apache, which is available from <ulink
	    url="http://httpd.apache.org/"/>.  Otherwise, you don't need
	  to perform this step.  Infact, we recommend that you build
	  Rivet as a shared object, and therefore, build it seperately
	  from Apache.
	</para>
      </step>
      <step>
	<title>Uncompress Sources</title>
	<para>
	  We will assume that you have Apache installed at this point.
	  You must uncompress the Rivet sources in the directory where you
	  wish to compile them.
	  <programlisting>
	    gunzip tcl-rivet-X.X.X.tar.gz
	    tar -xvf tcl-rivet-X.X.X.tar.gz
	  </programlisting>
	</para>
      </step>
      <step>
	<title>Building Rivet</title>
	<para>
	  Rivet uses a unique build system which we created especially
	  for this project.  It utilizes the information included in
	  Apache and Tcl regarding their configurations, in order to
	  compile itself via a series of Tcl scripts, which are
	  located in the <filename>buildscripts/</filename> directory.
	</para>
	<substeps>
	  <step>
	    <title>Edit src/make.tcl</title>
	    <para>
	      It may be necessary to edit
	      <filename>src/make.tcl</filename> by hand in order to
	      set certain options.  Try the next step first, and see
	      if it's successful.
	    </para>
	  </step>
	  <step>
	    <para>At this point, you are ready to run the build
	      system:</para>
	    <programlisting>
	      cd src/
	      ./make.tcl <replaceable>option</replaceable>
	    </programlisting>
	    <para>where <replaceable>option</replaceable> can be
	      either <option>shared</option> or
	      <option>static</option>.
	    </para>
	  </step>
	  <step>
	    <title>Install</title>
	    <para>
	      Now, you are ready to run the <command>./make
		install</command> command to install the resulting
	      files.  This should copy the shared object (like
	      <filename>mod_rivet.so</filename>, if one was
	      successfully created, into Apache's
	      <filename>libexec</filename> directory, as well as
	      install some support scripts and various code.
	    </para>
	  </step>
	</substeps>
      </step>
      <step>
	<title>Apache Configuration Files</title>
	<para>
	  Rivet is relatively easy to configure - we start off by
	  adding the module itself:
	</para>
	<programlisting>
	  LoadModule rivet_module <replaceable>/usr/lib/apache/1.3/mod_rivet.so</replaceable>
	</programlisting>
	<para>
	  This tells Apache to load the Rivet shared object, wherever
	  it happens to reside on your file system.  Now we have to
	  tell Apache what kind of files are "Rivet" files and how to
	  process them:
	</para>
	<programlisting>
	  AddType application/x-httpd-rivet .rvt
	  AddType application/x-rivet-tcl .tcl
	</programlisting>
	<para>
	  These tell Apache to process files with the
	  <filename>.rvt</filename> and <filename>.tcl</filename>
	  extensions as Rivet files.
	</para>
	<para>
	  For other directives that Rivet provides for Apache
	  configuration, please see <xref linkend="directives"/>.
	</para>
      </step>
    </procedure>
  </section>
  <section>
    <title>Rivet Internals</title>
    <para>
      This section easily falls out of date, as new code is added, old
      code is removed, and changes are made.  The best place to look
      is the source code itself.  If you are interested in the changes
      themselves FIXME.
    </para>
    <section>
      <title>Initialization</title>
      <para>
	When Apache is started, (or when child Apache processes are
	started if a threaded Tcl is used),
	<function>Rivet_InitTclStuff</function> is called, which
	creates a new interpreter, or one interpreter per virtual
	host, depending on the configuration. It also initializes
	various things, like the <structname>RivetChan</structname>
	channel system, creates the Rivet-specific Tcl commands, and
	executes Rivet's <filename>init.tcl</filename>.  The caching
	system is also set up, and if there is a
	<command>GlobalInitScript</command>, it is run.
      </para>
    </section>
    <section>
      <title>RivetChan</title>
      <para>
	The <structname>RivetChan</structname> system was created in
	order to have an actual Tcl channel that we could redirect
	standard output to.  This lets us use, for instance, the
	regular <command>puts</command> command in .rvt pages.  It
	works by creating a channel that buffers output, and, at
	predetermined times, passes it on to Apache's IO system.
	Tcl's regular standard output is replaced with an instance of
	this channel type, so that, by default, output will go to the
	web page.
      </para>
    </section>
    <section>
      <title>Page Parsing, Execution and Cacheing</title>
      <para>
	When a Rivet page is requested, it is transformed into an
	ordinary Tcl script by parsing the file for the &lt;? ?&gt;
	processing instruction tags.  Everything outside these tags
	becomes a large <command>puts</command> statement, and
	everything inside them remains Tcl code.
      </para>
      <para>
	Each .rvt file is evaluated in its own
	<constant>::request</constant> namespace, so that it is not
	necessary to create and tear down interpreters after each
	page.  By running in its own namespace, though, each page will
	not run afoul of local variables created by other scripts,
	because they will be deleted automatically when the namespace
	goes away after Apache finishes handling the request.
      </para>
      <note>
	One current problem with this system is that while variables
	are garbage collected, file handles are not, so that it is
	very important that Rivet script authors make sure to close
	all the files they open.
      </note>
      <para>
	After a script has been loaded and parsed into it's "pure Tcl"
	form, it is also cached, so that it may be used in the future
	without having to reload it (and re-parse it) from the disk.
	The number of scripts stored in memory is configurable.  This
	feature can significantly improve performance.
      </para>
    </section>
  </section>
  <section>
    <title>Upgrading from mod_dtcl or NeoWebScript</title>
    <para>
      Rivet is a break from the past, in that we, the authors, have
      attempted to take what we like best about our past efforts, and
      leave out or change things we no longer care for.  Backwards
      compatibility was not a primary goal when creating Rivet, but we
      do provide this information which may be of use to those wishing
      to upgrade from mod_dtcl or NWS installations.
    </para>
    <section>
      <title>mod_dtcl</title>
      <para>
	Rivet was originally based on the dtcl code, but it has
	changed (improved!) quite a bit.  The concepts remain the
	same, but many of the commands have changed.
      </para>
    </section>
    <section>
      <title>NeoWebScript</title>
      <para>TODO</para>
    </section>
  </section>
</article>
