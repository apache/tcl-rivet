<?xml version="1.0" encoding="iso-8859-1"?>

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "http://www.oasis-open.org/committees/docbook/xml/4.1.2/docbookx.dtd" [
      <!ENTITY hello.rvt SYSTEM "examples/hello.rvt" >
      <!ENTITY table.rvt SYSTEM "examples/table.rvt" >
      <!ENTITY vars.html SYSTEM "examples/vars.html" >
      <!ENTITY vars.rvt SYSTEM "examples/vars.rvt" >
      <!ENTITY upload.html SYSTEM "examples/upload.html" >
      <!ENTITY upload.rvt SYSTEM "examples/upload.rvt" >
]>

<!-- $Id$ -->

<article>
  <articleinfo>
    <title>Apache Rivet</title>
    <copyright>
      <year>2002</year>
      <year>2003</year>
      <holder>Apache Software Foundation</holder>
    </copyright>
    <author>
      <firstname>David</firstname>
      <surname>Welton</surname>
      <affiliation>
	<address>
	  <email>davidw@apache.org</email>
	</address>
      </affiliation>
    </author>
    <author>
      <firstname>Damon</firstname>
      <surname>Courtney</surname>
      <affiliation>
	<address>
	  <email>damonc@apache.org</email>
	</address>
      </affiliation>
    </author>
  </articleinfo>
  <para>
    This document is also available in the following languages: <ulink
    url="index.html.it">Italian</ulink>, <ulink
    url="index.html.ru">Russian</ulink>
  </para>

  <para>
    Document reversion: $Revision$, last modified $Date$ by $Author$.
  </para>

  <section>
    <title>Introduction to Apache Rivet</title>
    <para>
      Apache Rivet is a system for creating dynamic web content via a
      programming language integrated with Apache Web Server.  It is
      designed to be fast, powerful and extensible, consume few system
      resources, be easy to learn, and to provide the user with a
      platform that can also be used for other programming tasks
      outside the web (GUI's, system administration tasks, text
      processing, database manipulation, XML, and so on).  In order to
      meet these goals, we have chosen the Tcl programming language to
      combine with the Apache Web Server.
    </para>
    <para>
      In this manual, we aim to help get you started, and then
      writing productive code as quickly as possible, as well as
      giving you ideas on how to best take advantage of Rivet's
      architecture to create different styles of web site.
    </para>

    <para>
      This documentation is a work in progress, and, like everything
      else about Apache Rivet, it is Free Software.  If you see
      something that needs improving, and have ideas or suggestions,
      don't hesitate to let us know.  If you want to contribute
      directly, better yet!
    </para>
  </section>


  <section id="installation">
    <title>Apache Rivet Installation</title>

    <procedure>
      <step>
	<title>Check Dependencies</title>
	<para>
	  To install Rivet, you will need Tcl 8.2 or greater and
	  Apache 1.3.xx.  It is known to run on Linux, FreeBSD,
	  OpenBSD, and Solaris and HPUX.  Windows NT is also possible
	  - please see the directions in the distribution.
	</para>
      </step>
      <step>
	<title>Get Rivet</title>
	<para>
	  Download the sources at <ulink
	    url="http://tcl.apache.org/rivet/download"/>.  Currently
	  the only way to obtain Rivet.  In the future, we hope to
	  have a FreeBSD port, Debian package, RPM's, and windows
	  binaries.
	</para>
      </step>
      <step performance="optional">
	<title>Get and Install Apache Sources</title>
	<para>
          Rivet needs some Apache include (.h) files in order to
	  build.  The easiest way to get them is to download the
	  source code of the Apache web server, although some systems
	  (Debian GNU/Linux for example) make it possible to install
	  only the headers and other development files.  If you intend
	  to build Rivet statically (compiled into the Apache web
	  server instead of loaded dynamically), you definitely need
	  the sources.  We recommend that you build Rivet as a
	  loadable shared library, for maximum flexibility.</para>
	<para>
          The source code for the Apache web server may be found by
          following the links here: <ulink
          url="http://httpd.apache.org/"/>.
	</para>
      </step>
      <step>
	<title>Uncompress Sources</title>
	<para>
	  We will assume that you have Apache installed at this point.
	  You must uncompress the Rivet sources in the directory where you
	  wish to compile them.

	  <programlisting>gunzip tcl-rivet-X.X.X.tar.gz
tar -xvf tcl-rivet-X.X.X.tar.gz</programlisting>

	</para>
      </step>
      <step>
	<title>Building Rivet</title>
	<para>
	  Rivet uses a unique build system which we created especially
	  for this project.  It utilizes the information included with
	  Apache (via the <command>apxs</command> command) and Tcl
	  (<filename>tclConfig.sh</filename>) about their
	  configurations, so that Rivet can compile itself.
	</para>
	<substeps>
	  <step>
	    <title>Run ./configure.tcl</title>
	    <para>
	      This is similar to the <filename>configure</filename>
	      script included with many systems.  It's written in Tcl
	      though, for increased speed and clarity.  It takes
	      several arguments:
	    </para>

	    <variablelist>
	      <varlistentry>
		<term>-help</term>
		<listitem>
		  <para>Prints usage information.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>-enable-symbols</term>
		<listitem>
		  <para>Compiles Rivet with debugging symbols.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>-prefix <replaceable>directory</replaceable></term>
		<listitem>
		  <para>
		    Install Rivet Tcl packages to
		    <replaceable>directory</replaceable>.
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>-with-apxs <replaceable>file</replaceable></term>
		<listitem>
		  <para>Use <replaceable>file</replaceable> as apxs binary to
		  gather information about the local Apache installation.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>-with-tclconfig <replaceable>file</replaceable></term>
		<listitem>
		  <para>
		    Specify <replaceable>file</replaceable> as tclConfig.sh.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>

	    <programlisting>cd src/
./configure.tcl
Configuring
.........done.</programlisting>

	  </step>
	  <step>
	    <title>Run make.tcl</title>
	    <para>
	      At this point, you are ready to run the build
	      system:
	    </para>

	    <programlisting>./make.tcl <replaceable>option</replaceable></programlisting>

	    <para>where <replaceable>option</replaceable> can be
	      either <option>shared</option> or
	      <option>static</option>.
	    </para>
	  </step>
	  <step>
	    <title>Install</title>
	    <para>
	      Now, you are ready to run the <command>./make.tcl
		install</command> command to install the resulting
	      files.  This should copy the shared object (like
	      <filename>mod_rivet.so</filename>, if one was
	      successfully created, into Apache's
	      <filename>libexec</filename> directory, as well as
	      install some support scripts and various code.
	    </para>
	  </step>
	</substeps>
      </step>
      <step>
	<title>Apache Configuration Files</title>
	<para>
	  Rivet is relatively easy to configure - we start off by
	  adding the module itself:
	</para>

	<programlisting>LoadModule rivet_module	<replaceable>/usr/lib/apache/1.3/mod_rivet.so</replaceable></programlisting>

	<para>
	  This tells Apache to load the Rivet shared object, wherever
	  it happens to reside on your file system.  Now we have to
	  tell Apache what kind of files are "Rivet" files and how to
	  process them:
	</para>

	<programlisting>AddType application/x-httpd-rivet .rvt
AddType application/x-rivet-tcl .tcl</programlisting>

	<para>
	  These tell Apache to process files with the
	  <filename>.rvt</filename> and <filename>.tcl</filename>
	  extensions as Rivet files.
	</para>
	<para>
	  For other directives that Rivet provides for Apache
	  configuration, please see <xref linkend="directives"/>.
	</para>
      </step>
    </procedure>
  </section>

  <section id="directives">
    <title>Rivet Apache Directives</title>

    <para>
      These directives are used within the Apache httpd server
      configuration files to modify Apache Rivet's behavior.  Their
      precedence is as follows: <command>RivetDirConf</command>,
      <command>RivetUserConf</command>,
      <command>RivetServerConf</command>, meaning that DirConf will
      override UserConf, which will in turn override ServerConf.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>RivetServerConf</command>
	    <group choice="req">
	      <arg>CacheSize</arg>
	      <arg>GlobalInitScript</arg>
	      <arg>ChildInitScript</arg>
	      <arg>ChildExitScript</arg>
	      <arg>BeforeScript</arg>
	      <arg>AfterScript</arg>
	      <arg>ErrorScript</arg>
	      <arg>UploadDirectory</arg>
	      <arg>UploadMaxSize</arg>
	      <arg>UploadFilesToVar</arg>
	      <arg>SeperateVirtualInterps</arg>
	    </group>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para><command>RivetServerConf</command> specifies a global
	    option that is valid for the whole server.
	  </para>
	</listitem>
	<listitem>
	  <variablelist>
	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <arg>CacheSize</arg>
		  <arg><replaceable>size</replaceable></arg>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>
		  Sets the size of the internal page cache, where
		  <option><replaceable>size</replaceable></option> is
		  the number of byte-compiled pages to be cached for
		  future use.  Default is
		  <command>MaxRequestsPerChild</command> / 5, or 50,
		  if <command>MaxRequestsPerChild</command> is 0.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <arg>GlobalInitScript</arg>
		  <arg><replaceable>script</replaceable></arg>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>
		  Tcl script that is run when each interpreter is
		  initialized. <replaceable><option>script</option></replaceable>
		  is an actual Tcl script, so to run a file, you would
		  do:

		  <programlisting>RivetServerConf GlobalInitScript "source /var/www/foobar.tcl"</programlisting>
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <arg>ChildInitScript</arg>
		  <arg><replaceable>script</replaceable></arg>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>
		  Script to be evaluated when each Apache child
		  process is initialized.  This is the recommended
		  place to load modules, create global variables, open
		  connections to other facilities (such as databases)
		  and so on.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <arg>ChildExitScript</arg>
		  <arg><replaceable>script</replaceable></arg>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>
		  Script to be evaluated when each Apache child
		  process exits.  This is the logical place to clean
		  up resources created in
		  <option>ChildInitScript</option>.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <arg>BeforeScript</arg>
		  <arg><replaceable>script</replaceable></arg>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>
		  Script to be evaluated before each server parsed
		  (.rvt) page.  This can be used to create a standard
		  header, for instance.  It could also be used to load
		  code that you need for every page, if you don't want
		  to put it in a <option>GlobalInitScript</option>
		  <option>ChildInitScript</option> when you are first
		  developing a web site.
		  <note>
		    This code is evaluated at the global level, not
		    inside the request namespace where pages are
		    evaluated.
		  </note>
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <arg>AfterScript</arg>
		  <arg><replaceable>script</replaceable></arg>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>
		  Script to be called after each server parsed (.rvt) page.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <arg>ErrorScript</arg>
		  <arg><replaceable>script</replaceable></arg>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>
		  When Rivet encounters an error in a script, it
		  constructs an HTML page with some information about
		  the error, and the script that was being
		  evaluated. If an <option>ErrorScript</option> is
		  specified, it is possible to create custom error
		  pages.  This may be useful if you want to make sure
		  that users never view your source code.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <arg>UploadDirectory</arg>
		  <arg><replaceable>directory</replaceable></arg>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Directory to place uploaded files.</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <arg>UploadMaxSize</arg>
		  <arg><replaceable>size</replaceable></arg>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>Maximum size for uploaded files.</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <arg>UploadFilesToVar</arg>
		  <group choice="req"><arg>yes</arg><arg>no</arg></group>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>
		  This option controls whether it is possible to
		  upload files to a Tcl variable.  If you have a size
		  limit, and don't have to deal with large files, this
		  might be more convenient than sending the data to a
		  file on disk.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>
		<cmdsynopsis>
		  <arg>SeperateVirtualInterps</arg>
		  <group choice="req">
		    <arg>yes</arg>
		    <arg>no</arg>
		  </group>
		</cmdsynopsis>
	      </term>
	      <listitem>
		<para>
		  If on, Rivet will create a separate Tcl interpreter
		  for each Apache virtual host.  This is useful in an
		  ISP type situation where it is desirable to separate
		  clients into separate interpreters, so that they
		  don't accidentally interfere with one another.
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>RivetDirConf</command>
	    <group choice="req">
	      <arg>BeforeScript</arg>
	      <arg>AfterScript</arg>
	      <arg>ErrorScript</arg>
	      <arg>UploadDirectory</arg>
	    </group>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    These options are the same as for
	    <command>RivetServerConf</command>, except that they are
	    only valid for the directory where they are specified, and
	    its subdirectories.  It may be specified in
	    <command>Directory</command> sections.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>
	  <cmdsynopsis>
	    <command>RivetUserConf</command>
	    <group choice="req">
	      <arg>BeforeScript</arg>
	      <arg>AfterScript</arg>
	      <arg>ErrorScript</arg>
	      <arg>UploadDirectory</arg>
	    </group>
	  </cmdsynopsis>
	</term>
	<listitem>
	  <para>
	    These options are the same as for
	    <command>RivetServerConf</command>, except that they are
	    only valid for the directory where they are specified, and
	    its subdirectories.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </section>

  <section id="commands">
    <title>Rivet Tcl Commands and Variables</title>


    <refentry>
      <refnamediv>
	<refname>var</refname>
	<refname>var_qs</refname>
	<refname>var_post</refname>
	<refpurpose>get the value of a form variable.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
	<cmdsynopsis>
	  <command>
	    var
	  </command>
	  <group choice="req">
	    <arg>get</arg>
	    <arg>list</arg>
	    <arg>exists</arg>
	    <arg>number</arg>
	    <arg>all</arg>
	  </group>
	</cmdsynopsis>

	<cmdsynopsis>
	  <command>
	    var_qs
	  </command>
	  <group choice="req">
	    <arg>get</arg>
	    <arg>list</arg>
	    <arg>exists</arg>
	    <arg>number</arg>
	    <arg>all</arg>
	  </group>
	</cmdsynopsis>

	<cmdsynopsis>
	  <command>
	    var_post
	  </command>
	  <group choice="req">
	    <arg>get</arg>
	    <arg>list</arg>
	    <arg>exists</arg>
	    <arg>number</arg>
	    <arg>all</arg>
	  </group>
	</cmdsynopsis>


      </refsynopsisdiv>

      <refsect1>
	<title>Description</title>
	<para>
	  The <command>var</command> command retrieves information
	  about GET or POST variables sent to the script via client
	  request.  It treats both GET and POST variables the same,
	  regardless of their origin.  Note that there are two
	  additional forms of <command>var</command>:
	  <command>var_qs</command> and <command>var_post</command>.
	  These two restrict the retrieval of information to
	  parameters arriving via the querystring
	  (?foo=bar&amp;bee=bop) or POSTing, respectively.
	</para>
	<variablelist>
	  <varlistentry>
	    <term>
	      <cmdsynopsis>
		<arg>get</arg>
		<arg><replaceable>varname</replaceable></arg>
		<arg><replaceable><optional>default</optional></replaceable></arg>
	      </cmdsynopsis>
	    </term>
	    <listitem>
	      <para>
		Returns the value of variable
		<option><replaceable>varname</replaceable></option>
		as a string (even if there are multiple values).  If
		the variable doesn't exist as a GET or POST
		variable, the
		<option><replaceable><optional>default</optional></replaceable></option>
		value is returned, otherwise "" - an empty string -
		is returned.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>
	      <cmdsynopsis>
		<arg>list</arg>
		<arg><replaceable>varname</replaceable></arg>
	      </cmdsynopsis>
	    </term>
	    <listitem>
	      <para>
		Returns the value of variable
		<option><replaceable>varname</replaceable></option> as a
		list, if there are multiple values.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>
	      <cmdsynopsis>
		<arg>exists</arg>
		<arg><replaceable>varname</replaceable></arg>
	      </cmdsynopsis>
	    </term>
	    <listitem>
	      <para>
		Returns 1 if
		<option><replaceable>varname</replaceable></option>
		exists, 0 if it doesn't.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>
	      <cmdsynopsis>
		<arg>number</arg>
	      </cmdsynopsis>
	    </term>
	    <listitem>
	      <para>
		Returns the number of variables.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>
	      <cmdsynopsis>
		<arg>all</arg>
	      </cmdsynopsis>
	    </term>
	    <listitem>
	      <para>
		Return a list of variable names and values.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	<para>
	  See <xref linkend="variable_access"/>.
	</para>

      </refsect1>
    </refentry>

    <refentry>
      <refnamediv>
	<refname>upload</refname>
	<refpurpose>handle a file uploaded by a client.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
	<cmdsynopsis>
	  <command>upload</command>
	  <group choice="req">
	    <arg>channel</arg>
	    <arg>save</arg>
	    <arg>data</arg>
	    <arg>exists</arg>
	    <arg>size</arg>
	    <arg>type</arg>
	    <arg>filename</arg>
	  </group>
	</cmdsynopsis>
      </refsynopsisdiv>

      <refsect1>
	<title>Description</title>
	<para>The upload command is for file upload manipulation.
	  See the relevant Apache Directives to further configure the
	  behavior of this Rivet feature.</para>


	<variablelist>
	  <varlistentry>
	    <term>
	      <cmdsynopsis>
		<arg>channel</arg>
		<arg><replaceable>uploadname</replaceable></arg>
	      </cmdsynopsis>
	    </term>
	    <listitem>
	      <para>
		When given the name of a file upload
		<option><replaceable>uploadname</replaceable></option>,
		returns a Tcl channel that can be used to access the
		uploaded file.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>
	      <cmdsynopsis>
		<arg>save</arg>
		<arg><replaceable>uploadname</replaceable></arg>
		<arg><replaceable>filename</replaceable></arg>
	      </cmdsynopsis>
	    </term>
	    <listitem>
	      <para>
		Saves the
		<option><replaceable>uploadname</replaceable></option> in
		the file
		<option><replaceable>filename</replaceable></option>.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>
	      <cmdsynopsis>
		<arg>data</arg>
		<arg><replaceable>uploadname</replaceable></arg>
	      </cmdsynopsis>
	    </term>
	    <listitem>
	      <para>
		Returns data uploaded to the server.  This is binary clean
		- in other words, it will work even with files like
		images, executables, compressed files, and so on.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>
	      <cmdsynopsis>
		<arg>size</arg>
		<arg><replaceable>uploadname</replaceable></arg>
	      </cmdsynopsis>
	    </term>
	    <listitem>
	      <para>
		Returns the size of the file uploaded.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>
	      <cmdsynopsis>
		<arg>type</arg>
	      </cmdsynopsis>
	    </term>
	    <listitem>
	      <para>
		If the <varname>Content-type</varname> is set, it is
		returned, otherwise, an empty string.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>
	      <cmdsynopsis>
		<arg>filename</arg>
		<arg><replaceable>uploadname</replaceable></arg>
	      </cmdsynopsis>
	    </term>
	    <listitem>
	      <para>
		Returns the filename on the remote host that uploaded the file.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>
	      <cmdsynopsis>
		<arg>names</arg>
	      </cmdsynopsis>
	    </term>
	    <listitem>
	      <para>
		Returns the variable names, as a list, of all the files
		uploaded.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>

	<para>
	  See <xref linkend="upload"/>.
	</para>


      </refsect1>
    </refentry>

    <refentry>
      <refnamediv>
	<refname>load_response</refname>
	<refpurpose>load form variables into an array.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
	<cmdsynopsis>
	  <command>load_response</command>
	  <arg><replaceable>arrayName</replaceable></arg>
	</cmdsynopsis>
      </refsynopsisdiv>

      <refsect1>
	<title>Description</title>
	Load any form variables passed to this page into an
	array.
      </refsect1>
    </refentry>


    <refentry>
      <refnamediv>
	<refname>load_env</refname>
	<refpurpose>get the request's environment variables.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
	<cmdsynopsis>
	  <command>load_env</command>
	  <arg choice="opt"><replaceable>array_name</replaceable></arg>
	</cmdsynopsis>
      </refsynopsisdiv>

      <refsect1>
	<title>Description</title>

	<para>
	  Load the array of environment variables into the specified
	  array name.  Uses array <option>::request::env</option> by
	  default.
	</para>
	<para>
	  As Rivet pages are run in the <option>::request</option>
	  namespace, it isn't necessary to qualify the array name
	  for most uses - it's ok to access it as
	  <option>env</option>.
	</para>
      </refsect1>
    </refentry>

    <refentry>
      <refnamediv>
	<refname>load_headers</refname>
	<refpurpose>get client request's headers.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
	<cmdsynopsis>
	  <command>load_headers</command>
	  <arg><replaceable>array_name</replaceable></arg>
	</cmdsynopsis>
      </refsynopsisdiv>

      <refsect1>
	<title>Description</title>
	<para>
	  Load the headers that come from a client request into the
	  provided array name, or use <option>headers</option> if no
	  name is provided.
	</para>
      </refsect1>
    </refentry>

    <refentry>
      <refnamediv>
	<refname>load_cookies</refname>
	<refpurpose>get any cookie variables sent by the client.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
	<cmdsynopsis>
	  <command>load_cookies</command>
	  <arg choice="opt"><replaceable>array_name</replaceable></arg>
	</cmdsynopsis>
      </refsynopsisdiv>

      <refsect1>
	<title>Description</title>
      </refsect1>
      <para>
	Load the array of cookie variables into the specified
	array name.  Uses array <option>cookies</option> by
	default.
      </para>
    </refentry>

    <refentry>
      <refnamediv>
	<refname>include</refname>
	<refpurpose>includes a file into the output stream without modification.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
	<cmdsynopsis>
	  <command>include</command>
	  <arg><replaceable>filename_name</replaceable></arg>
	</cmdsynopsis>
      </refsynopsisdiv>

      <refsect1>
	<title>Description</title>
	<para>
	  Include a file without parsing it for processing tags &lt;?
	  and ?&gt;.  This is the best way to include an HTML file or
	  any other static content.
	</para>
      </refsect1>
    </refentry>

    <refentry>
      <refnamediv>
	<refname>parse</refname>
	<refpurpose>parses a Rivet template file.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
	<cmdsynopsis>
	  <command>parse</command>
	  <arg><replaceable>filename</replaceable></arg>
	</cmdsynopsis>
      </refsynopsisdiv>

      <refsect1>
	<title>Description</title>
	<para>
	  Like the Tcl <command>source</command> command, but also
	  parses for Rivet &lt;?  and ?&gt; processing tags.  Using
	  this command, you can use one .rvt file from another.
	</para>
      </refsect1>
    </refentry>

    <refentry>
      <refnamediv>
	<refname>headers</refname>
	<refpurpose>set and parse HTTP headers.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
	<cmdsynopsis>
	  <command>headers</command>
	  <group choice="req">
	    <arg>set</arg>
	    <arg>redirect</arg>
	    <arg>add</arg>
	    <arg>type</arg>
	    <arg>numeric</arg>
	  </group>
	</cmdsynopsis>
      </refsynopsisdiv>

      <refsect1>
	<title>Description</title>
	<para>
	  The <command>headers</command> command is for setting and
	  parsing HTTP headers.
	</para>

	<variablelist>

	  <varlistentry>
	    <term><cmdsynopsis>
		<arg>set</arg>
		<arg><replaceable>headername</replaceable></arg>
		<arg><replaceable>value</replaceable></arg>
	      </cmdsynopsis>
	    </term>
	    <listitem>
	      <para>
		Set arbitrary header names and values.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>
	      <cmdsynopsis>
		<arg>redirect</arg>
		<arg><replaceable>uri</replaceable></arg>
	      </cmdsynopsis>
	    </term>
	    <listitem>
	      <para>
		Redirect from the current page to a new
		URI. <emphasis>Must</emphasis> be done in the first block
		of TCL code.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>
	      <cmdsynopsis>
		<arg>add</arg>
		<arg><replaceable>headername</replaceable></arg>
		<arg><replaceable>value</replaceable></arg>
	      </cmdsynopsis>
	    </term>
	    <listitem>
	      <para>Add text to header
		<varname>headername</varname>.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><cmdsynopsis>
		<arg>type</arg>
		<arg><replaceable>content-type</replaceable></arg>
	      </cmdsynopsis>
	    </term>
	    <listitem>
	      <para>
		This command sets the <constant>Content-type</constant>
		header returned by the script, which is useful if you wish
		to send content other than HTML with Rivet - PNG or jpeg
		images, for example.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>
	      <cmdsynopsis>
		<arg>numeric</arg>
		<arg><replaceable>response code</replaceable></arg>
	      </cmdsynopsis>
	    </term>
	    <listitem>
	      <para>Set a numeric response code, such as 200, 404 or 500.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </refsect1>
    </refentry>

    <refentry>
      <refnamediv>
	<refname>makeurl</refname>
	<refpurpose>construct url's based on hostname, port.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
	<cmdsynopsis>
	  <command>makeurl</command>
	  <arg><replaceable>filename</replaceable></arg>
	</cmdsynopsis>
      </refsynopsisdiv>

      <refsect1>
	<title>Description</title>
	<para>
	  Create a self referencing URL from a filename.  For example:
	  <programlisting>makeurl /tclp.gif</programlisting>
	  returns
	  <computeroutput>http://[hostname]:[port]/tclp.gif</computeroutput>.
	  where hostname and port are the hostname and port of the
	  server in question.
	</para>
      </refsect1>
    </refentry>


    <refentry>
      <refnamediv>
	<refname>cookie</refname>
	<refpurpose>get and set cookies.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
	<cmdsynopsis>
	  <command>cookie</command>
	  <arg>set</arg>
	  <arg><replaceable>cookieName</replaceable></arg>
	  <arg><replaceable><optional>cookiValue</optional></replaceable></arg>
	  <arg>-days <replaceable>expireInDays</replaceable></arg>
	  <arg>-hours <replaceable>expireInHours</replaceable></arg>
	  <arg>-minutes <replaceable>expireInMinutes</replaceable></arg>
	  <arg>-expires <replaceable>Wdy, DD-Mon-YYYY HH:MM:SS GMT</replaceable></arg>
	  <arg>-path <replaceable>uriPathCookieAppliesTo</replaceable></arg>
	  <arg>-secure <replaceable>1/0</replaceable></arg>
	</cmdsynopsis>
	<cmdsynopsis>
	  <command>cookie</command>
	  <arg>get</arg>
	  <arg><replaceable>cookieName</replaceable></arg>
	</cmdsynopsis>
      </refsynopsisdiv>

      <refsect1>
	<title>Description</title>
	<para>
	  <command>cookie</command> gets or sets a cookie.  When you
	  get a cookie, the command returns the value of the cookie,
	  or an empty string if no cookie exists.
	</para>
      </refsect1>
    </refentry>

    <refentry>
      <refnamediv>
	<refname>clock_to_rfc850_gmt</refname>
	<refpurpose>create a rfc850 time from [clock seconds].</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
	<cmdsynopsis>
	  <command>clock_to_rfc850_gmt</command>
	  <arg><replaceable>seconds</replaceable></arg>
	</cmdsynopsis>
      </refsynopsisdiv>

      <refsect1>
	<title>Description</title>
	<para>
	  Convert an integer-seconds-since-1970 click value to
	  RFC850 format, with the additional requirement that it be
	  GMT only.
	</para>
      </refsect1>
    </refentry>

    <refentry>
      <refnamediv>
	<refname>html</refname>
	<refpurpose>construct html tagged text.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
	<cmdsynopsis>
	  <command>html</command>
	  <arg><replaceable>string</replaceable></arg>
	  <arg rep="repeat"><replaceable>arg</replaceable></arg>
	</cmdsynopsis>
      </refsynopsisdiv>

      <refsect1>
	<title>Description</title>
	<para>
	  Print text with the added ability to pass HTML tags
	  following the string.  Example:
	  <programlisting>html "Test" b i</programlisting>
	  produces: <computeroutput>&lt;b&gt;&lt;i&gt;Test&lt;/i&gt;&lt;/b&gt;</computeroutput>
	</para>
      </refsect1>
    </refentry>

    <refentry>
      <refnamediv>
	<refname>incr0</refname>
	<refpurpose>increment a variable or set it to 1 if nonexistant.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
	<cmdsynopsis>
	  <command>incr0</command>
	  <arg><replaceable>varname</replaceable></arg>
	  <arg><replaceable>num</replaceable></arg>
	</cmdsynopsis>
      </refsynopsisdiv>

      <refsect1>
	<title>Description</title>
	<para>
	  Increment a variable
	  <option><replaceable>varname</replaceable></option> by
	  <option><replaceable>num</replaceable></option>.  If the
	  variable doesn't exist, create it instead of returning an
	  error.
	</para>
      </refsect1>
    </refentry>

    <refentry>
      <refnamediv>
	<refname>parray</refname>
	<refpurpose>Tcl's <command>parray</command> with html formatting.</refpurpose>
      </refnamediv>

      <refsynopsisdiv>
	<cmdsynopsis>
	  <command>parray</command>
	  <arg><replaceable>arrayName</replaceable></arg>
	  <arg><replaceable><optional>pattern</optional></replaceable></arg>
	</cmdsynopsis>
      </refsynopsisdiv>

      <refsect1>
	<title>Description</title>
	<para>
	  An html version of the standard Tcl
	  <command>parray</command> command.  Displays the entire
	  contents of an array in a sorted, nicely-formatted way.
	  Mostly used for debugging purposes.
	</para>

      </refsect1>
    </refentry>

  </section>

  <section id="examples">
    <title>Examples and Usage</title>

    <para>
      Some examples of Rivet usage follow.  Some prior Tcl knowledge
      is assumed.  If you don't know much Tcl, don't worry, it's easy,
      and there are some good resources available on the web that will
      get you up to speed quickly.  Go to the <link
	linkend="websites">web sites</link> section and have a look.
    </para>

    <example id="hello world">
      <title>Hello World</title>
      <para>
	As with any tool, it's always nice to see something work, so
	let's create a small "Hello World" page.</para>
      <para>
	Assuming you have Apache configured correctly, create a file
	called <filename>hello.rvt</filename> where Apache can find
	it, with the following content:
      </para>
      <programlisting>&hello.rvt;</programlisting>
      <para>
	If you then access it with your browser, you should see a
	blank page with the text "Hello World" (without the quotes) on
	it.
      </para>
    </example>

    <example id="table">
      <title>Generate a Table</title>
      <para>
	In another simple example, we dynamically generate a table:
      </para>
      <programlisting>&table.rvt;</programlisting>
      <para>
	If you read the code, you can see that this is pure Tcl.  We
	could take the same code, run it outside of Rivet, and it
	would generate the same HTML!
      </para>
      <para>
	The result should look something like this:
      </para>
      <graphic fileref="table.png"/>

    </example>

    <example id="variable_access">
      <title>Variable Access</title>
      <para>
	Here, we demonstrate how to access variables set by GET or
	POST operations.
      </para>
      <para>
	Given an HTML form like the following:
      </para>
      <programlisting>&vars.html;</programlisting>
      <para>
	We can use this Rivet script to get the variable values:
      </para>
      <programlisting>&vars.rvt;</programlisting>
      <para>
	The first statement checks to make sure that the
	<varname>boss</varname> variable has been passed to the
	script, and then does something with that information.  If
	it's not present, an error is added to the list of errors.
      </para>
      <para>
	In the second block of code, the variable
	<varname>salary</varname> is fetched, with one more error
	check - because it's a number, it needs to be composed of
	digits.
      </para>
      <para>
	The <varname>boss</varname> variable isn't required to have
	been sent - we set it to "Mr. Burns" if it isn't among the
	information we received.
      </para>
      <para>
	The last bit of variable handing code is a bit trickier.
	Because <varname>skills</varname> is a listbox, and can
	potentially have multiple values, we opt to receive them as a
	list, so that at some point, we could iterate over them.
      </para>
      <para>
	The script then checks to make sure that
	<varname>errlist</varname> is empty and outputting a thankyou
	message.  If <varname>errlist</varname> is not empty, the list
	of errors it contains is printed.
      </para>
    </example>

    <example id="upload">
      <title>File Upload</title>
      <para>
	The following HTML in one file, say,
	<filename>upload.html</filename>
      </para>
      <programlisting>&upload.html;</programlisting>
      <para>
	Can be used with the following Tcl code, in a second file
	(<filename>upload.rvt</filename> for instance)
	in order to create a file upload form.
      </para>
      <programlisting>&upload.rvt;</programlisting>
    </example>

  </section>

  <section id="tcl_packages">
    <title>Rivet Tcl Packages</title>
    <para>
      In addition to the core Apache module, Rivet provides a number
      of Tcl packages that include potentially useful code.
    </para>
    <itemizedlist>

      <listitem>
	<para>commserver is a package providing a server that can be
	used for IPC.  Still experimental.  Requires the comm package
	from tcllib.</para>
      </listitem>

      <listitem>
	<para>dio is a database abstraction layer.</para>
      </listitem>

      <listitem>
	<para>dtcl is a compatibility package for mod_dtcl
	applications.</para>
      </listitem>

      <listitem>
	<para>form - for creating forms.</para>
      </listitem>

      <listitem>
	<para>rivet - some additional, useful routines.</para>
      </listitem>

      <listitem>
	<para>tclrivet</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="help">
    <title>Resources - How to Get Help</title>

    <section>
      <title>Mailing Lists</title>
      <para>
	The Rivet mailing list is the first place you should turn for
	help, if you haven't found the solution to your problem in the
	documentation.  Send email to
	<email>rivet-user@tcl.apache.org</email>.  If you have a
	question, idea, or comment about the Rivet code itself, please
	send us email at <email>rivet-dev@tcl.apache.org</email>.  To
	subscribe to either list, post email to
	<email>rivet-<replaceable>list</replaceable>-subscribe@tcl.apache.org</email>.
      </para>
      <para>
	The mailing list archives are available at <ulink
	  url="http://nagoya.apache.org/eyebrowse/SummarizeList?listId=118"/>
      </para>
    </section>

    <section>
      <title>Newsgroup</title>
      <para>
The <ulink url="news:comp.lang.tcl"/> newsgroup is a good place to ask
about Tcl questions in general.  Rivet developers also follow the
newsgroup, but it's best to ask Rivet-specific questions on the Rivet
list.
      </para>
    </section>

    <section id="websites">
      <title>Web Sites</title>

      <para>
	There are several web sites that cover Apache and Tcl
	extensively.
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    <ulink url="http://tcl.apache.org"/> is the home for the
	    Apache Tcl project.  Go there for the latest versions of
	    our software (if you aren't reading these pages off of the
	    site!).
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <ulink url="http://httpd.apache.org/docs/"/> is the first
	    place to go for questions about the Apache web server.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <ulink url="http://www.tcl.tk"/> is the canonical site
	    for Tcl information.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <ulink url="http://wiki.tcl.tk"/> is the Tcl'ers Wiki, a
	    free-form place to search for answers and ask for help.
	  </para>
	</listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Bug Tracking System</title>

      <para>
	Apache Rivet uses the Apache Bug Tracking system at <ulink
	  url="http://nagoya.apache.org/bugzilla/"></ulink>.  Here,
	you can report problems, or check and see if existing issues
	are already known and being dealt with.
      </para>
    </section>

    <section>
      <title>IRC</title>

      <para>
        Occasionally, someone from the Rivet team is on IRC at
        irc.freenode.net, channel #tcl.
      </para>
    </section>

    <section>
      <title>Editing Rivet Template Files</title>
      <para>
	Rivet makes available code for two popular editors,
	<application>emacs</application> and
	<application>vim</application> to facilitate the editing of
	Rivet template files.  The key concept is that the editor is
	aware of the &lt;? and ?&gt; tags and switches back and forth
	between Tcl and HTML modes as the cursor moves.  These files,
	<filename>two-mode-mode.el</filename> and
	<filename>rvt.vim</filename> are available in the
	<filename>contrib/</filename> directory.
      </para>
    </section>


  </section>

  <section id="internals">
    <title>Rivet Internals</title>
    <para>
      This section easily falls out of date, as new code is added, old
      code is removed, and changes are made.  The best place to look
      is the source code itself.  If you are interested in the changes
      themselves, <command>cvs</command> can provide you with
      information about what has been happening with the code.
    </para>
    <section>
      <title>Initialization</title>
      <para>
	When Apache is started, (or when child Apache processes are
	started if a threaded Tcl is used),
	<function>Rivet_InitTclStuff</function> is called, which
	creates a new interpreter, or one interpreter per virtual
	host, depending on the configuration. It also initializes
	various things, like the <structname>RivetChan</structname>
	channel system, creates the Rivet-specific Tcl commands, and
	executes Rivet's <filename>init.tcl</filename>.  The caching
	system is also set up, and if there is a
	<command>GlobalInitScript</command>, it is run.
      </para>
    </section>
    <section>
      <title>RivetChan</title>
      <para>
	The <structname>RivetChan</structname> system was created in
	order to have an actual Tcl channel that we could redirect
	standard output to.  This lets us use, for instance, the
	regular <command>puts</command> command in .rvt pages.  It
	works by creating a channel that buffers output, and, at
	predetermined times, passes it on to Apache's IO system.
	Tcl's regular standard output is replaced with an instance of
	this channel type, so that, by default, output will go to the
	web page.
      </para>
    </section>
    <section>
      <title>Page Parsing, Execution and Caching</title>
      <para>
	When a Rivet page is requested, it is transformed into an
	ordinary Tcl script by parsing the file for the &lt;? ?&gt;
	processing instruction tags.  Everything outside these tags
	becomes a large <command>puts</command> statement, and
	everything inside them remains Tcl code.
      </para>
      <para>
	Each .rvt file is evaluated in its own
	<constant>::request</constant> namespace, so that it is not
	necessary to create and tear down interpreters after each
	page.  By running in its own namespace, though, each page will
	not run afoul of local variables created by other scripts,
	because they will be deleted automatically when the namespace
	goes away after Apache finishes handling the request.
      <note>
	    One current problem with this system is that while
	    variables are garbage collected, file handles are not, so
	    that it is very important that Rivet script authors make
	    sure to close all the files they open.
      </note>
      </para>
      <para>
	After a script has been loaded and parsed into it's "pure Tcl"
	form, it is also cached, so that it may be used in the future
	without having to reload it (and re-parse it) from the disk.
	The number of scripts stored in memory is configurable.  This
	feature can significantly improve performance.
      </para>
    </section>
  </section>
  <section id="upgrading">
    <title>Upgrading from mod_dtcl or NeoWebScript</title>
    <para>
      Rivet is a break from the past, in that we, the authors, have
      attempted to take what we like best about our past efforts, and
      leave out or change things we no longer care for.  Backwards
      compatibility was not a primary goal when creating Rivet, but we
      do provide this information which may be of use to those wishing
      to upgrade from mod_dtcl or NWS installations.
    </para>
    <section>
      <title>mod_dtcl</title>
      <para>
	Rivet was originally based on the dtcl code, but it has
	changed (improved!) quite a bit.  The concepts remain the
	same, but many of the commands have changed.
      </para>
    </section>
    <section>
      <title>NeoWebScript</title>
      <para>TODO</para>
    </section>
  </section>
</article>
