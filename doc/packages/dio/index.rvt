<?

rivet_command_document {

name DIO

package DIO

short "Database Interface Objects"

command "::DIO::handle"

arguments "interface ?objectName? ?-option option -option option ...?"

description {
<B>DIO</B> is designed to be a generic, object-oriented interface to SQL
databases.  Its main goal is to be as generic as possible, but since not
all SQL databases support the exact same syntaxes, keeping code generic
between databases is left to the abilities of the programmer.  DIO simply
provides a way to keep the Tcl interface generic.
<P>
<I>interface</I> - The name of the database interface.
<P>
<B>Interfaces</B>:
    <UL>
    Postgresql
    <BR>
    Mysql
    </UL>

If <I>objectName</I> is specified, DIO creates an object of that name.
If there is no <I>objectName</I> given, DIO will automatically generate
a unique object ID.
<P>
<B>Options</B>:
<P>

<B>-host <I>hostname</I></B>
<UL>
The hostname of the computer to connect to.  If none is given, DIO assumes
the local host.
</UL>

<B>-port <I>portNumber</I></B>
<UL>
The port number to connect to on <I>hostname</I>.
</UL>

<B>-user <I>username</I></B>
<UL>
The username you wish to login to the server as.
</UL>

<B>-pass <I>password</I></B>
<UL>
The password to login to the server with.
</UL>

<B>-db <I>database</I></B>
<UL>
The name of the database to connect to.
</UL>

<B>-errorinfo <I>string</I></B>
<UL>
The last error to occur while processing a request.
</UL>

<B>-table <I>tableName</I></B>
<UL>
The default table to use when using built-in commands for storing and fetching.
</UL>

<B>-keyfield <I>keyFieldname</I></B>
<UL>
The default field to use as the primary key when using built-in commands for
storing and fetching.
</UL>

<B>-autokey <I>[ 0 | 1 ]</I></B>
<UL>
If this option is set to 1, DIO will attempt to determine an automatic key
for <I>keyField</I> when storing and fetching.  In most databases, this
requires that the <I>sequence</I> also be specified.  In the case of MySQL,
where sequences do not exist, autokey must be used in conjunction with a
table which has a field specified as AUTO.
</UL>

<B>-sequence <I>sequenceName</I></B>
<UL>
If DIO is automatically generating keys, it will use this sequence as a
means to gain a unique number for the stored key.
</UL>

<BR>
<BR>
<B><A NAME="commands" HREF="#commands">DIO Object Commands</A></B>:
<P>

<I>objectName</I> <B>array</B> <I>request</I>
<UL>
Execute <I>request</I> as a SQL query and create an array from the first
record found.  The array is set with the fields of the table and the values
of the record found.
</UL>

<I>objectName</I> <B>autokey</B> <I>?value [0 | 1]?</I>
<UL>
Return the current autokey value.  If <I>value</I> is specified, it sets
a new value for the autokey option.
</UL>

<I>objectName</I> <B>close</B>
<UL>
Close the current database connection.  This command is automatically called
when the DIO object is destroyed.
</UL>

<I>objectName</I> <B>db</B> <I>?value?</I>
<UL>
Return the current database.  If <I>value</I> is specified, it sets a new
value for the database.  In most cases, the DIO object will automatically
connect to the new database when this option is changed.
</UL>

<I>objectName</I> <B>delete</B> <I>key ?-option option ...?</I>
<UL>
Delete a record from the database where the primary key matches <I>key</I>.
<P>
</UL>

<I>objectName</I> <B>destroy</B>
<UL>
Destroy the DIO object.
<P>
</UL>

<I>objectName</I> <B>errorinfo</B> <I>?value?</I>
<UL>
Return the current errorinfo.  If <I>value</I> is specified, it sets a new
value for the errorinfo.
<P>
<I>errorinfo</I> contains the value of the last error, if any, to occur
while executing a request.  When a request fails for any reason, this
variable is filled with the error message from the SQL interface package.
<P>
</UL>

<I>objectName</I> <B>exec</B> <I>request</I>
<UL>
Execute <I>request</I> as a SQL query.  When the exec command is called,
the query is executed, and a DIO result object is returned.  From there,
the result object can be used to obtain information about the query status
and records in a generic way.
See <A HREF="#resultobj">Result Object Commands.</A>
<P>
</UL>

<I>objectName</I> <B>fetch</B> <I>key arrayName ?-option option ...?</I>
<UL>
Fetch a record from the database where the primary key matches <I>key</I>
and store the result in an array called <I>arrayName</I>
<P>
</UL>

<I>objectName</I> <B>host</B> <I>?value?</I>
<UL>
Return the current host value.  If <I>value</I> is specified, it sets
a new value for the host.
</UL>

<I>objectName</I> <B>keyfield</B> <I>?value?</I>
<UL>
Return the current keyfield.  If <I>value</I> is specified, it sets a new
value for the keyfield.
</UL>

<I>objectName</I> <B>keys</B> <I>?pattern? ?-option option ...?</I>
<UL>
Return a list of keys in the database.  If <I>pattern</I> is specified,
only the keys matching will be returned.
<P>
</UL>

<I>objectName</I> <B>lastkey</B>
<UL>
Return the last key that was used from <I>sequence</I>.  If sequence has
not been specified, this command returns an empty string.
</UL>

<I>objectName</I> <B>list</B> <I>request</I>
<UL>
Execute <I>request</I> as a SQL query and return a list of the first column
of each record found.
</UL>

<I>objectName</I> <B>nextkey</B>
<UL>
Increment <I>sequence</I> and return the next key to be used.  If sequence
has not been specified, this command returns an empty string.
</UL>

<I>objectName</I> <B>open</B>
<UL>
Open the connection to the current database.  This command is automatically
called from any command which accesses the database.
</UL>

<I>objectName</I> <B>pass</B> <I>?value?</I>
<UL>
Return the current pass value.  If <I>value</I> is specified, it sets
a new value for the password.
</UL>

<I>objectName</I> <B>port</B> <I>?value?</I>
<UL>
Return the current port value.  If <I>value</I> is specified, it sets
a new value for the port.
</UL>

<I>objectName</I> <B>sequence</B> <I>?value?</I>
<UL>
Return the current sequence value.  If <I>value</I> is specified, it sets
a new value for the sequence.
</UL>

<I>objectName</I> <B>store</B> <I>arrayName ?-option option ...?</I>
<UL>
Store <I>arrayName</I> in the database.
<P>
</UL>

<I>objectName</I> <B>string</B> <I>request</I>
<UL>
Execute <I>request</I> as a SQL query and return a string containing the
first record found.
</UL>

<I>objectName</I> <B>table</B> <I>?value?</I>
<UL>
Return the current table.  If <I>value</I> is specified, it sets a new
value for the table.
</UL>

<I>objectName</I> <B>user</B> <I>?value?</I>
<UL>
Return the current user value.  If <I>value</I> is specified, it sets
a new value for the user.
</UL>

<BR>
<BR>
<B><A NAME="resultobj" HREF="#resultobj">Result Object Commands</A></B>:
<P>

<I>resultObj</I> <B>autocache ?value?</B>
<UL>
Return the current autocache value.  If <I>value</I> is specified, it sets
a new value for autocache.
<P>
If autocache is true, the result object will
automatically cache rows as you use them.  This means that the first time
you execute a forall command, each row is being cached in the result object
itself and will no longer need to access the SQL result.
<B>Default is true</B>
</UL>

<I>resultObj</I> <B>cache</B>
<UL>
Cache the results of the current SQL result in the result object itself.  This
means that even if the database connection is closed and all the results of
the DIO object are lost, this result object will still maintain a cached copy
of its records.
</UL>

<I>resultObj</I> <B>errorcode ?value?</B>
<UL>
Return the current errorcode value.  If <I>value</I> is specified, it sets
a new value for errorcode.
<P>
<I>errorcode</I> contains the current code from the SQL database which
specifies the result of the query statement which created this object.
This variable can be used to determine the success or failure of a query.
</UL>

<I>resultObj</I> <B>errorinfo ?value?</B>
<UL>
Return the current errorinfo value.  If <I>value</I> is specified, it sets
a new value for errorinfo.
<P>
If an error occurred during the SQL query, DIO attempts to set the value of
<I>errorinfo</I> to the resulting error message.
</UL>

<I>resultObj</I> <B>fields ?value?</B>
<UL>
Return the current fields value.  If <I>value</I> is specified, it sets
a new value for fields.
<P>
<I>fields</I> contains the list of fields used in this query.  The fields
are in order of the fields retrieved for each row.
</UL>

<I>resultObj</I> <B>forall</B> <I>-type varName body</I>
<UL>
Execute <I>body</I> over each record in the result object.
<P>
<B>Types</B>:
<P>
<B>-array</B>
    <UL>
    Create varName as an array where the indexes are the names of the fields
    in the table and the values are the values of the current row.
    </UL>
<B>-keyvalue</B>
    <UL>
    <P>
    Set varName to a list containing key-value pairs of fields and values
    from the current row. (-field value -field value)
    </UL>
<B>-list</B>
    <UL>
    <P>
    Set varName to a list that contains the values of the current row.
    </UL>
</UL>

<I>resultObj</I> <B>next</B> <I>-type ?varName?</I>
<UL>
Retrieve the next record in the result object.
<P>
<B>Types</B>:
<P>
<B>-array</B>
    <UL>
    Create varName as an array where the indexes are the names of the fields
    in the table and the values are the values of the current row.
    </UL>
<B>-keyvalue</B>
    <UL>
    <P>
    Set varName to a list containing key-value pairs of fields and values
    from the current row. (-field value -field value)
    </UL>
<B>-list</B>
    <UL>
    <P>
    Set varName to a list that contains the values of the current row.
    </UL>
</UL>

<I>resultObj</I> <B>numrows ?value?</B>
<UL>
Return the current numrows value.  If <I>value</I> is specified, it sets
a new value for numrows.
<P>
<I>numrows</I> is the number of rows in this result.
</UL>

<I>resultObj</I> <B>resultid ?value?</B>
<UL>
Return the current resultid value.  If <I>value</I> is specified, it sets
a new value for resultid.
<P>
<I>resultid</I> in most databases is the result pointer which was given us
by the database.  This variable is not generic and should not really be
used, but it's there if you want it.
</UL>

<I>resultObj</I> <B>rowid ?value?</B>
<UL>
Return the current rowid value.  If <I>value</I> is specified, it sets
a new value for rowid.
<P>
<I>rowid</I> contains the number of the current result record in the
result object.  This variable should not really be accessed outside of the
result object, but it's there if you want it.
</UL>

}

seealso { <A HREF="../diodisplay/">DIO Display</A> }

}

?>
